##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [3.14.1] date: [Sat Jul 30 06:49:33 EDT 2022]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################

# TARGET ?= revolution
TARGET ?= NUCLEO_F411RE

######################################
# building variables
######################################

# debug build?
DEBUG = 1
# optimization
OPT = -Og

#######################################
# paths
#######################################

# Build path
APP_DIR = dRehmFlight/Versions/dRehmFlight_STM32_BETA_1.3
LIB_DIR = Arduino_STM32_LL
VARIANT_DIR = $(LIB_DIR)/variants/STM32F4xx/F411R(C-E)T
BUILD_DIR = build

# Include target specific files and options
include ./$(VARIANT_DIR)/variant_$(TARGET).mk

######################################
# Application source files
######################################

INO_SOURCES := \
$(APP_DIR)/dRehmFlight_STM32_BETA_1.3.ino \
$(APP_DIR)/print.ino \
$(APP_DIR)/shell_commands.ino \

CPP_SOURCES := \
$(BUILD_DIR)/combined.cpp \
$(VARIANT_DIR)/variant_$(TARGET).cpp \

C_SOURCES := \
$(APP_DIR)/config.c \

######################################
# UAVWare source files
######################################

# Generate UAVW file list from source file list
INPUT_FILE = file_list.txt
# $(info $$INPUT_FILE := [${INPUT_FILE}])

SRCS := $(addprefix $(LIB_DIR)/, $(file < $(INPUT_FILE)))
# $(info $$SRCS := [${SRCS}])

C_SOURCES += $(filter %.c,$(SRCS))
# $(info $$C_SOURCES := [${C_SOURCES}])
INO_SOURCES += $(filter %.ino,$(SRCS))
# $(info $$INO_SOURCES := [${INO_SOURCES}])
CPP_SOURCES += $(filter %.cpp,$(SRCS))
# $(info $$CPP_SOURCES := [${CPP_SOURCES}])
ASM_SOURCES := $(filter %.S,$(SRCS))
# $(info $$ASM_SOURCES := [${ASM_SOURCES}])


#######################################
# binaries
#######################################

TOOLS_PATH = C:/Users/geoma/AppData/Local/Arduino15/packages/geosmall/tools
# GCC_PATH = $(TOOLS_PATH)/xpack-arm-none-eabi-gcc/9.3.1-1.3/bin
CMSIS_PATH = $(TOOLS_PATH)/CMSIS/5.7.0

PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
CXX = $(GCC_PATH)/$(PREFIX)g++
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
CXX = $(PREFIX)g++
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S
 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS = \
-DUSE_FULL_LL_DRIVER \
-DLFS_CONFIG=lfs_config.h \
-DLFS_NO_MALLOC \
-D$(BUILD_SERIES) \
-DSTM32F411xE

# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-I./$(APP_DIR) \
-I./$(LIB_DIR)/cores/arduino \
-I./$(LIB_DIR)/cores/arduino/stm32 \
-I./$(LIB_DIR)/cores/arduino/uvos \
-I./$(LIB_DIR)/cores/arduino/uvos/uvos_inc \
-I./$(LIB_DIR)/cores/arduino/uvos/libraries/inc \
-I./$(LIB_DIR)/libraries/UAVWare/src \
-I./$(LIB_DIR)/libraries/mavlink_c_v1/src \
-I./$(LIB_DIR)/system/Drivers/CMSIS/Device/ST/$(BUILD_SERIES)/Include \
-I./$(LIB_DIR)/system/Drivers/CMSIS/Device/ST/$(BUILD_SERIES)/Source/Templates/gcc \
-I./$(LIB_DIR)/system/$(BUILD_SERIES) \
-I./$(LIB_DIR)/system/Drivers/$(BUILD_SERIES)_HAL_Driver/Inc \
-I./$(LIB_DIR)/system/Drivers/$(BUILD_SERIES)_HAL_Driver/Src \
-I./$(LIB_DIR)/system/uvos_hal/$(BUILD_SERIES) \
"-I./$(VARIANT_DIR)" \
-I$(CMSIS_PATH)/CMSIS/Core/Include \

# CFLAGS1 = -mapcs-frame -fomit-frame-pointer
# CFLAGS1 += -Wall -Wextra -Wfloat-equal -Wdouble-promotion -Wshadow -Werror
# CFLAGS2 = -fdata-sections -ffunction-sections
# CFLAGS2 += -std=gnu99 -Wunsuffixed-float-constants -DPIOS_ENABLE_CXX

# CPPFLAGS1 = -mapcs-frame -fomit-frame-pointer
# CPPFLAGS1 += -Wall -Wextra -Wfloat-equal -Wdouble-promotion -Wshadow -Werror
# CPPFLAGS2 = -fdata-sections -ffunction-sections
# CPPFLAGS2 += -DPIOS_ENABLE_CXX -fno-rtti -fno-exceptions -std=c++11 -fno-use-cxa-atexit

# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -std=gnu99 -fdata-sections -ffunction-sections -Wno-address-of-packed-member -Wno-cast-align

CPPFLAGS = $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -std=c++11 -fdata-sections -ffunction-sections -Wno-address-of-packed-member -Wno-cast-align -Wno-unused-variable

INOFLAGS = -Wno-unused-variable

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
CPPFLAGS += -g -gdwarf-2
endif

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"

#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = "$(VARIANT_DIR)/ldscript.ld"

# libraries
LIBS = -lc -lm -lnosys 
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# default action: build all
all: $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin $(BUILD_DIR)/combined.cpp

$(BUILD_DIR)/combined.cpp: $(INO_SOURCES) | $(BUILD_DIR)
	cat $(INO_SOURCES) > $@

#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))

OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(CPP_SOURCES:.cpp=.o)))
vpath %.cpp $(sort $(dir $(CPP_SOURCES)))

# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.S=.o)))
vpath %.S $(sort $(dir $(ASM_SOURCES)))

$(BUILD_DIR)/%.o: %.c Makefile file_list.txt | $(BUILD_DIR)
	$(info CC $@)
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) "$<" -o $@

$(BUILD_DIR)/%.o: %.cpp Makefile file_list.txt | $(BUILD_DIR)
	$(info CPP $@)
	$(CXX) -c $(CPPFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.cpp=.lst)) "$<" -o $@

$(BUILD_DIR)/%.o: %.S Makefile file_list.txt | $(BUILD_DIR)
	$(info AS $@)
	$(AS) -c $(CFLAGS) "$<" -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile file_list.txt
	$(info LD linking)
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@ -Wl,--defsym=LD_FLASH_OFFSET=$(LD_FLASH_OFFSET) -Wl,--defsym=LD_MAX_SIZE=$(LD_FLASH_SIZE) -Wl,--defsym=LD_MAX_DATA_SIZE=$(LD_RAM_SIZE) -Wl,--print-memory-usage
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	

$(BUILD_DIR):
	mkdir $@		

# Flash firmware into chip 
.PHONY: flash
flash:
	"C:/Program Files/SEGGER/Ozone/Ozone.exe" $(TARGET).jdebug


#######################################
# clean up
#######################################
clean:
ifeq ($(OS),Windows_NT)
	cmd /C rmdir /Q /S $(BUILD_DIR)
else
	-rm -fR $(BUILD_DIR)
endif

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***